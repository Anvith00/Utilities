#!/usr/bin/env python3

# https://github.com/helloSystem/Menu/issues/3


from PyQt5.QtWidgets import QApplication, QSystemTrayIcon, QMenu, QWidget, QMessageBox, QAction
from PyQt5.QtGui import QIcon, QPixmap, QCursor
from PyQt5.QtCore import Qt, QProcess, QMetaObject, QCoreApplication, QEvent, QObject, QTimer
import os
import psutil
import sys

class BatteryApplet(QObject):
    def refresh(self):
        battery = psutil.sensors_battery()
        try:
            seconds = battery.secsleft
        except:
            sys.stderr.write("No battery found in this computer.")
            exit(1)
        bsuffix = ""
        if seconds == -2:
            bsuffix = "-charging"
            self.tray.setToolTip("Plugged in, %s charged" % (str(int(battery.percent // 1)) + "%"))
        else:
            minutes, seconds = divmod(seconds, 60)
            hours, minutes = divmod(minutes, 60)
            if minutes == 1:
                m = 'minute'
            else:
                m = 'minutes'
            if hours == 0:
                self.tray.setToolTip("On battery, %s charge, %s %s left." % (str(int(battery.percent // 1)) + "%", minutes, m))
            elif hours == 1:
                self.tray.setToolTip("On battery, %s charge, %s hour and %s %s left." % (str(int(battery.percent // 1)) + "%", hours, minutes, m))
            else:
                self.tray.setToolTip("On battery, %s charge, %s hours and %s %s left." % (str(int(battery.percent // 1)) + "%", hours, minutes, m))
        bl = int((battery.percent + 10) // 20) * 20
        self.tray.setIcon(QIcon.fromTheme('battery-%03d%s' % (bl, bsuffix)))

    def __init__(self):

        super().__init__()
        
        self.showTODO()

        icon = QIcon(os.path.dirname(__file__) + '/Resources/Battery.png')

        self.tray = QSystemTrayIcon()
        self.tray.setIcon(icon)
        self.tray.setVisible(True)
        self.refresh()
        self.timer = QTimer()
        self.timer.timeout.connect(self.refresh)
        self.timer.setInterval(30000)
        self.timer.start()

        # Sneaky PyQt quirk! A reference to the actions must be kept around or the actions will be destroyed
        self.actions = []
        
        self.menu = QMenu()
        
        self.tray.setContextMenu(self.menu)
        self.tray.activated.connect(self.show_menu)

        action = QAction("About")
        action.triggered.connect(self._showAbout)
        self.actions.append(action)
        self.menu.addAction(action)

    def show_menu(self, reason):


        if reason == QSystemTrayIcon.Trigger:
            # Ideally we would just tell it when it gets left-clicked
            # to just do whatever it does when it gets right-clicked, but:
            # self.tray.activated(QSystemTrayIcon.Context) # TypeError: native Qt signal is not callable
            print(self.tray.geometry().getRect()) # Always returns (0, 0, 0, 0); why?
            # self.menu.popup(QPoint(self.tray.geometry().x(), self.tray.geometry().y())) # Does not work for the same reason
            # self.menu.move(QCursor.pos())
            # self.menu.show() # When called like this, it appears as a context menu over the menu bar, which is not desired
            # self.menu.activateWindow() # Needed on some systems to make the menu go away when clicked anywhere else but in the menu?
            self.menu.popup(QCursor.pos()) # When called like this, it appears almost at the correct location but with the wrong font size, 
            # as if it was a context menu rather than a real menu; probably because somehow its parent now is not the global menu bar main window?

    def _showAbout(self):
        print("showDialog")
        msg = QMessageBox()
        msg.setWindowTitle("Battery")
        msg.setIconPixmap(QPixmap(os.path.dirname(__file__) + "/Resources/Battery.png").scaledToWidth(64, Qt.SmoothTransformation))
        candidates = ["COPYRIGHT", "COPYING", "LICENSE"]
        for candidate in candidates:
            if os.path.exists(os.path.dirname(__file__) + "/" + candidate):
                with open(os.path.dirname(__file__) + "/" + candidate, 'r') as file:
                    data = file.read()
                msg.setDetailedText(data)
        msg.setText("<h3>Battery</h3>")
        msg.setInformativeText("A simple applet to show the battery percentage using Python <a href='https://psutil.readthedocs.io/en/latest/index.html#psutil.sensors_battery'>psutil.sensors_battery()</a>.<br><br><a href='https://github.com/helloSystem/Utilities'>https://github.com/helloSystem/Utilities</a>")
        msg.exec()

    def showTODO(self, detailed_text=""):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setWindowTitle("Developer Preview")
        msg.setText("This application is a preview for developers.<br>It is not fully functional yet.")
        msg.setDetailedText("Please see https://github.com/helloSystem/Utilities if you would like to contribute.\n\n" + detailed_text)
        msg.exec()

if __name__ == "__main__":
    # Simple singleton:
    # Ensure that only one instance of this application is running by trying to kill the other ones
    p = QProcess()
    p.setProgram("pkill")
    p.setArguments(["-f", os.path.abspath(__file__)])
    cmd = p.program() + " " + " ".join(p.arguments())
    print(cmd)
    p.start()
    p.waitForFinished()
    #sys.exit(0)
    app = QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(False)
    app.setAttribute(Qt.AA_UseHighDpiPixmaps)
    widget = BatteryApplet()
    sys.exit(app.exec_())
