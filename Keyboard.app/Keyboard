#!/usr/bin/env python3.7


# Simple Keyboard Layout switcher for FreeBSD in PyQt5


# Copyright (c) 2020, Simon Peter <probono@puredarwin.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import os, sys, subprocess

try:
    from PyQt5 import QtWidgets, QtGui, QtCore
except:
    print("Could not import PyQt5. On FreeBSD, sudo pkg install py37-qt5-widgets")


class KeyboardSwitcher(object):

    def __init__(self):
        self.supported_layouts = self.getSupportedLayouts()
        self.basicWindow()

    def getSupportedLayouts(self):
        candidates = os.listdir("/usr/local/share/X11/xkb/symbols/")
        # supported_layouts = []
        # for candidate in candidates:
        #     if len(candidate) < 4:
        #         supported_layouts.append(candidate)
        # supported_layouts.sort()
        # supported_layouts.insert(0, "en")
        # return supported_layouts

        # Only show the main ones in order to keep the list short and tidy, let's see how long
        # it takes for the first person to complain that exotic ones are missing...
        # Let's not end up like https://www.youtube.com/watch?v=4nR4HP2x1iU
        supported_layouts = ["us", "gb", "fr", "es", "de", "it", "jp", "pt", "no", "se", "fi", "ru", "tr", "il"]

        return supported_layouts

    def basicWindow(self):
        app = QtWidgets.QApplication(sys.argv)
        self.window = QtWidgets.QMainWindow()
        self.window.setFixedSize(250, 380)
        self._showMenu()

        self.window.setWindowTitle('Keyboard Layout')

        layout = QtWidgets.QVBoxLayout()

        self.list_widget = QtWidgets.QListWidget()
        self.list_widget.setAlternatingRowColors(True)
        print(self.supported_layouts)
        cleartext = ["English (United States)", "English (United Kingdom)", "Français", "Español",
                     "Deutsch", "Italiano", "日本人", "Português", "Norsk",
                     "Svenska", "Suomalainen", "Pусский", "Türk", "עִברִית"]
        i = 0
        for supported_layout in self.supported_layouts:
            item = QtWidgets.QListWidgetItem(cleartext[i])
            i = i+1
            setattr(item, "layout", supported_layout)
            print("%s = %s" % (supported_layout, cleartext[i-1]))
            self.list_widget.addItem(item)
        self.list_widget.itemSelectionChanged.connect(self.onSelectionChanged)
        self.list_widget.setUniformItemSizes(True)
        self.list_widget.setItemAlignment(QtCore.Qt.AlignVCenter)
        layout.addWidget(self.list_widget)

        # self.checkbox_keyswap = QtWidgets.QCheckBox()
        # self.checkbox_keyswap.setText("Swap Ctrl and Alt keys")
        # self.checkbox_keyswap.setChecked(True)
        # self.checkbox_keyswap.clicked.connect(self.onSelectionChanged)
        # layout.addWidget(self.checkbox_keyswap)

        # self.checkbox_disablecapslock = QtWidgets.QCheckBox()
        # self.checkbox_disablecapslock.setText("Disable Caps Lock key")
        # self.checkbox_disablecapslock.setChecked(True)
        # layout.addWidget(self.checkbox_disablecapslock)

        widget = QtWidgets.QWidget()
        widget.setLayout(layout)
        self.window.setCentralWidget(widget)
        self.window.show()
        sys.exit(app.exec_())

    def onSelectionChanged(self):
        print("Selection changed")
        print(self.list_widget.selectedItems()[0].text())
        print(getattr(self.list_widget.selectedItems()[0], "layout"))

        # For now, we swap left Ctrl and left Alt no matter what. This may get handled better in the future
        args = ["setxkbmap", '-layout', getattr(self.list_widget.selectedItems()[0], "layout"), "-option", "ctrl:swap_lalt_lctl", "-option", "ctrl:swap_lalt_lctl,caps:none", "-variant", "nodeadkeys"]

        # if self.checkbox_keyswap.isChecked() == True and self.checkbox_disablecapslock == False:
        #     args.append("-option", "ctrl:swap_lalt_lctl")
        # elif self.checkbox_keyswap.isChecked() == False and self.checkbox_disablecapslock == True:
        #     args.append("-option", "caps:none")
        # elif self.checkbox_keyswap.isChecked() == True and self.checkbox_disablecapslock == True:
        #     args.append("-option", "ctrl:swap_lalt_lctl,caps:none")
        out = subprocess.call(args)
        if out == 0:
            print("Changed keyboard layout successfully")
        else:
            print("Error setting keyboard layout, retrying without nodeadkeys")
            args = ["setxkbmap", '-layout', getattr(self.list_widget.selectedItems()[0], "layout"), "-option", "ctrl:swap_lalt_lctl", "-option", "ctrl:swap_lalt_lctl,caps:none"]
            out = subprocess.call(args)
            if out == 0:
                print("Changed keyboard layout successfully")
            else:
                print("Error setting keyboard layout, giving up")

    def _showMenu(self):
        exitAct = QtWidgets.QAction('&Quit', self.window)
        exitAct.setShortcut('Ctrl+Q')
        exitAct.setStatusTip('Exit application')
        exitAct.triggered.connect(QtWidgets.QApplication.quit)
        menubar = self.window.menuBar()
        fileMenu = menubar.addMenu('&File')
        fileMenu.addAction(exitAct)
        aboutAct = QtWidgets.QAction('&About', self.window)
        aboutAct.setStatusTip('About this application')
        aboutAct.triggered.connect(self._showAbout)
        helpMenu = menubar.addMenu('&Help')
        helpMenu.addAction(aboutAct)


    def _showAbout(self):
        print("showDialog")
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle("About")
        msg.setIconPixmap(QtGui.QPixmap(os.path.dirname(__file__) + "/Resources/Keyboard.png"))
        candidates = ["COPYRIGHT", "COPYING", "LICENSE"]
        for candidate in candidates:
            if os.path.exists(os.path.dirname(__file__) + "/" + candidate):
                with open(os.path.dirname(__file__) + "/" + candidate, 'r') as file:
                    data = file.read()
                msg.setDetailedText(data)
        msg.setText("<h3>Keyboard</h3>")
        msg.setInformativeText(
            "A simple preferences application to set the keyboard layout<br><br><a href='https://github.com/helloSystem/Utilities'>https://github.com/helloSystem/Utilities</a>")
        msg.exec()


if __name__ == "__main__":
    ks = KeyboardSwitcher()


