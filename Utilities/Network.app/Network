#!/usr/bin/env python3

# https://github.com/helloSystem/Menu/issues/23


from PyQt5.QtWidgets import QApplication, QSystemTrayIcon, QMenu, QAction, QHBoxLayout, QGroupBox, QSlider, QWidget, \
    QActionGroup, QDesktopWidget, QMessageBox, QInputDialog, QLineEdit
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtCore import Qt, QProcess, QMetaObject, QCoreApplication, QEvent, QObject, QTimer
import sys, os, re

     
class NetworkMenu(QObject):

    def __init__(self):

        super().__init__()
        
        self.showTODO("It can show wireless networks but not connect to them. Do you know how to fix this?")

        icon = QIcon.fromTheme("network-wireless-symbolic") # FIXME: How to get dark rather than bright icon?
        # TODO: Change the icon depending on signal strength; see /usr/local/share/icons/elementary-xfce/status/symbolic/network-wireless-*
        self.tray = QSystemTrayIcon()
        self.tray.setIcon(icon)
        self.tray.setVisible(True)
        self.menu = QMenu()

        self.tray.setContextMenu(self.menu)
        
        # NOTE:
        # https://forum.learnpyqt.com/t/qsystemtrayicon-example/689
        # Sneaky PyQt quirk! A reference to the actions must be kept around or the actions will be destroyed
        self.actions = []
        self.sliderWindow = None
        
        self.refreshMenu() # Initially populate the menu
        self.tray.installEventFilter(self) # FIXME: This never seems to get called, why?
        self.installEventFilter(self)  # FIXME: This never seems to get called, why?

    def eventFilter(self, obj, event):
        print("eventFilter function running") # FIXME: Why is this never called when the icon is right-clicked?
        # We need to refresh the contents of the right-click menu somehow when the user right-clicks...

    def onClicked(self, reason):
        self.refreshMenu()
        S = Ui_Slider()
        self.sliderWindow = S # Need to keep a reference around so that it does not get destroyed
        S.show()

    def refreshMenu(self):
        self.actions = []
        self.menu.clear()
        # Get the sound devices from
        # cat /dev/sndstat
        p = QProcess()
        p.setProgram("wpa_cli")
        
        # First, scan
        p.setArguments(["scan"])
        print(p.program() + " " + " ".join(p.arguments()))
        p.start()
        p.waitForFinished()
        
        # Second, show
        p.setArguments(["scan_results"])
        print(p.program() + " " + " ".join(p.arguments()))
        p.start()
        p.waitForFinished()
        
        lines = str(p.readAllStandardOutput(), 'utf-8').strip().split("\n")
        
        self.wirelessGroup = QActionGroup(self.menu) # Only one of the actions added to this group can be active

        action = QAction("Wireless")
        action.setDisabled(True)
        self.actions.append(action)
        self.menu.addAction(action)
        # TODO: List the different wireless interfaces with `wpa_cli interface` if there is more than one
        # TODO: Allow to open a hotspot
        
        if len(lines) > 1:
        
            for line in lines:
                if line.startswith("Selected") or line.startswith("bssid"):
                    continue
                print(line)
                # Parse out information for each network
                bssid = line[0:17].strip()
                signal_level = int(line[23:26].strip())
                label = line[26:].strip() # Remove first 26 characers (bssid / frequency / signal level)
                # Remove flags
                label = re.sub(r'\[.*?\]', '', label).strip()
                ssid = label
                if label == "":
                    label = bssid # For networks with hidden ssid (network name)
                action = QAction(line)
                action.__setattr__("ssid", ssid)
                action.__setattr__("bssid", bssid)
                action.triggered.connect(self.switchNetwork)  # lambda could be used to pass an argument but the argument passed is taken at the time when this executes, which is not what we want
                action.setText(label)
                action.setIcon(QIcon.fromTheme("network-wireless-symbolic"))
                # TODO: Set different icons based on signal_level
                action.setCheckable(True)
                if "default" in line:
                    action.setChecked(True)
                self.actions.append(action)
                self.wirelessGroup.addAction(action)
                self.menu.addAction(action)
                
        self.menu.addSeparator()
        
        action = QAction("Rescan Networks")
        # action.setDisabled(True)
        action.triggered.connect(self.refreshMenu)
        self.actions.append(action)
        self.menu.addAction(action)

        action = QAction("Create Hotspot...") # TODO: To be implemented
        action.setDisabled(True)
        self.actions.append(action)
        self.menu.addAction(action)
                
        action = QAction("Switch Off") # TODO: To be implemented
        action.setDisabled(True)
        self.actions.append(action)
        self.menu.addAction(action)
        
        self.menu.addSeparator()
        
        action = QAction("About")
        action.triggered.connect(self._showAbout)
        self.actions.append(action)
        self.menu.addAction(action)
        
    def switchNetwork(self, line):
        # sysctl hw.snd.default_unit=1 switches to pcm1
        ssid = getattr(self.wirelessGroup.checkedAction(), "ssid")
        bssid = getattr(self.wirelessGroup.checkedAction(), "bssid")

        p = QProcess()
        p.setProgram("wpa_cli")
        
        # Enable network 0
        p.setArguments(["enable_network", "0"])
        cmd = p.program() + " " + " ".join(p.arguments())
        print(cmd)
        p.start()
        p.waitForFinished()
        lines = str(p.readAll(), 'utf-8').strip().split("\n")
        print(lines)
        if not "OK" in lines:
            self.showError("Could not enable network", cmd + "\n\n" + "\n".join(lines))
            
        # Set the network
        # NOTE: https://forum.qt.io/topic/84396/weird-behavior-of-qprocess-and-multiple-qoutes/9
        if ssid != "":
            p.setArguments(["set_network", "0", "ssid", "\"" + ssid + "\""])
        else:
            p.setArguments(["set_network", "0", "bssid", "\"" + bssid + "\""])
        cmd = p.program() + " " + " ".join(p.arguments())
        print(cmd)
        p.start()
        p.waitForFinished()
        lines = str(p.readAll(), 'utf-8').strip().split("\n")
        print(lines)
        if not "OK" in lines:
            self.showError("Could not set network", cmd + "\n\n" + "\n".join(lines))
 
        # Ask for password and set it
        # TODO: Ask for password and set it only if needed 
        
        password, ok = QInputDialog.getText(None, " ", "Password", QLineEdit.Password) # TODO: Make OK only clickable when we have >= 8 characters
        if ok:
            p.setArguments(["set_network", "0", "psk", "\"" + password + "\""])
            cmd = p.program() + " " + " ".join(p.arguments()).replace(password, "***") # Don't show the password in UI
            print(cmd)
            p.start()
            p.waitForFinished()
            lines = str(p.readAll(), 'utf-8').strip().split("\n")
            print(lines)
            if not "OK" in lines:
                self.showError("Could not set password", cmd + "\n\n" + "\n".join(lines))
                   
        # TODO: Connect to the network
        # FIXME: How?

    def _showAbout(self):
        print("showDialog")
        msg = QMessageBox()
        msg.setWindowTitle("Network")
        msg.setIconPixmap(QPixmap(os.path.dirname(__file__) + "/Resources/Network.png").scaledToWidth(64, Qt.SmoothTransformation))
        candidates = ["COPYRIGHT", "COPYING", "LICENSE"]
        for candidate in candidates:
            if os.path.exists(os.path.dirname(__file__) + "/" + candidate):
                with open(os.path.dirname(__file__) + "/" + candidate, 'r') as file:
                    data = file.read()
                msg.setDetailedText(data)
        msg.setText("<h3>Network</h3>")
        msg.setInformativeText("A simple QSystemTrayIcon application to select the wireless network using <a href='https://www.freebsd.org/cgi/man.cgi?wpa_cli'>wpa_cli</a><br><br><a href='https://github.com/helloSystem/Utilities'>https://github.com/helloSystem/Utilities</a>")
        msg.exec()

    def showError(self, text, detailed_text=""):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setWindowTitle("Error")
        msg.setText(text)
        if detailed_text != "":
            msg.setDetailedText(detailed_text)
        msg.exec()
 
    def showTODO(self, detailed_text=""):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setWindowTitle(" ")
        msg.setText("This application is a preview for developers.<br>It is not fully functional yet.")
        msg.setDetailedText("Please see https://github.com/helloSystem/Utilities if you would like to contribute.\n\n" + detailed_text)
        msg.exec()       

if __name__ == "__main__":

    # Simple singleton:
    # Ensure that only one instance of this application is running by trying to kill the other ones
    p = QProcess()
    p.setProgram("pkill")
    p.setArguments(["-f", os.path.abspath(__file__)])
    cmd = p.program() + " " + " ".join(p.arguments())
    print(cmd)
    p.start()
    p.waitForFinished()

    app = QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(False)
    NM = NetworkMenu()
    sys.exit(app.exec_())
