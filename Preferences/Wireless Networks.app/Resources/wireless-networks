#!/bin/sh


# Based on furybsd-wlan-tool
# TODO: Entirely convert to Python


# BSD 3-Clause License
# 
# Copyright (c) 2019-2020, Joe Maloney <jpm820@gmail.com>
# Copyright (c) 2020-2021, Simon Peter <probono@puredarwin.org>
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


set -x 

# Configure wifi via dialogs
#
# For debugging purposes, pass `-d` as parameter to the script,
# in which case it will behave as if you are root and invent
# some wifi devices for you.
#

HERE="$(dirname "$(readlink -f "${0}")")"

### COMMAND-LINE ARGUMENTS
#
#
if [ "x$1" = "x-d" ] ; then
  # In debug-mode, 
  #   - pretend we're root
  #   - bogus wifi devices     
  is_user() { 
    false
  }
  get_wireless() {
    echo "em0"
  }
else
  is_user() { 
    test "$(id -u)" != "0" 
  }
  get_wireless() {
    sysctl -b net.wlan.devices
  }
fi

### RUN-TIME DEPENDENCIES
#
# Based on the available tooling, defines the following functions:
#   - warning <text>
#     Displays the <text> as a warning, no output, no return value
#   - ask_wifi_list <filename>
#     Displays the interfaces from <filename> (one per line), pick one,
#     outputs the item that was selected, no return value
#

warning() {
  "${HERE}/dialog.py" warning "$1"
}

ask_wifi_list() {
  "${HERE}/dialog.py" dropdown
}

### SCRIPT PROPER
#
#
# Only run as superuser
if is_user ; then
  echo "This script must be run as root" 1>&2
  exit 1
fi

rm /tmp/wifi-selection 2>/dev/null || true
rm /tmp/wlan-selection 2>/dev/null || true

# Check for no wifi devices and exit if none found

wnic=$(get_wireless)
if [ "$?" -eq 0 ] && [ -z "${wnic}" ] ; then
  warning
  exit 0
fi

# Check for existing wifi devices in rc.conf
grep -q "^wlans" /etc/rc.conf
if [ $? -eq 0 ] ; then
  WLANCOUNT=$(cat /etc/rc.conf | grep "^wlans_" | wc -l | awk '{print 1}')
else
  WLANCOUNT="0"
fi
WLAN="wlan${WLANCOUNT}"

# Present list of detected wifi devices
ask_wifi_list  | tee /tmp/wifi-selection

# Now configure the wifi device in rc.conf based on user selection
wnic=$(cat /tmp/wifi-selection)
if [ "$?" -eq 0 ] && [ -z "${wnic}" ] ; then
  exit 0
fi
cat /etc/rc.conf 2>/dev/null | grep -q "wlans_${wnic}="
if [ $? -ne 0 ] ; then
  sysrc wlans_${wnic}="${WLAN}"
  sysrc ifconfig_${WLAN}="WPA SYNCDHCP inet6 accept_rtadv"
  service netif restart ${WLAN}
  cat /etc/rc.conf | grep ${wnic} | cut -d'"' -f2 > /tmp/wlan-selection
  WLAN=$(cat /tmp/wlan-selection)
  ifconfig ${WLAN} up scan
  killall wpa_gui 2>/dev/null || true
  wpa_gui -i ${WLAN}
else
  cat /etc/rc.conf | grep ${wnic} | cut -d'"' -f2 > /tmp/wlan-selection
  WLAN=$(cat /tmp/wlan-selection)
  ifconfig ${WLAN} up scan
  killall wpa_gui 2>/dev/null || true
  wpa_gui -i ${WLAN}
fi

rm /tmp/wifi-selection 2>/dev/null || true
rm /tmp/wlan-selection 2>/dev/null || true
